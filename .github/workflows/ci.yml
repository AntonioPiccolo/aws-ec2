name: CI - Test and Validation

# Quando si attiva questo workflow?
on:
  push:
    branches: [ main, develop ]  # Ad ogni push su main o develop
  pull_request:
    branches: [ main ]           # Ad ogni PR verso main

# Definisce i job da eseguire
jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    # Services esterni (come database per i test)
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: aws_password
          POSTGRES_USER: aws_user
          POSTGRES_DB: aws_ec2
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    # 1. Scarica il codice sorgente
    - name: Checkout code
      uses: actions/checkout@v4

    # 2. Configura Node.js
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22'
        cache: 'npm'

    # 3. Installa le dipendenze
    - name: Install dependencies
      run: npm ci

    # 4. Crea il file .env.test per i test
    - name: Create test environment file
      run: |
        echo "NODE_ENV=test" > .env.test
        echo "DB_HOST=localhost" >> .env.test
        echo "DB_PORT=5432" >> .env.test
        echo "DB_NAME=aws_ec2" >> .env.test
        echo "DB_USER=aws_user" >> .env.test
        echo "DB_PASS=aws_password" >> .env.test
        echo "API_KEY=aws-ec2-api-key" >> .env.test
        echo "S3_BUCKET_NAME=aws-ec2-uploads-test" >> .env.test

    # 5. Aspetta che PostgreSQL sia pronto
    - name: Wait for PostgreSQL
      run: |
        until pg_isready -h localhost -p 5432 -U aws_user; do
          echo "Waiting for PostgreSQL..."
          sleep 2
        done

    # 6. Esegue i test
    - name: Run tests
      run: npm test
      env:
        DATABASE_URL: postgresql://aws_user:aws_password@localhost:5432/aws_ec2

  lint-and-format:
    name: Code Quality Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    # Questo step fallirà se non abbiamo eslint configurato, ma è una best practice
    - name: Run linting (if available)
      run: npm run lint || echo "No linting configured, skipping..."
      continue-on-error: true
      
    # Controlla se ci sono vulnerabilità nelle dipendenze
    - name: Security audit
      run: npm audit --audit-level=high